# This file is used to deploy the microservices to a production environment
# TODO: Setup it for staging and production environments
# For development we just docker-compose DBs and RabbitMQ
version: '3.8'

services:
  maven-build:
    build:
      context: .
      dockerfile: Dockerfile-build
    image: maven-build:local
    networks:
      - microservices-network
  # Eureka (Service Discovery) runs when maven-build is successful
  eureka:
    build:
      context: .
      dockerfile: ./discovery_service/Dockerfile
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_NAME: discovery_service
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: false
      EUREKA_CLIENT_FETCH_REGISTRY: false
    depends_on:
      maven-build:
        condition: service_completed_successfully
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # API Gateway runs when maven-build and Eureka are successful
  # It is registered in Eureka, and it routes requests to the appropriate services
  api_gateway:
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:8761/eureka/
      SPRING_APPLICATION_NAME: api_gateway
    depends_on:
      maven-build:
        condition: service_completed_successfully
      eureka:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # PostgreSQL database
  postgres:
    image: postgres:16.6
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # MongoDB NoSQL database
  mongo:
    image: mongo:7.0.16
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # RabbitMQ message broker for microservices communication
  rabbitmq:
    image: rabbitmq:3.13.7-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Auth Service Microservice, providing Authentication and Authorization functionality
  # Depends on maven-build, PostgreSQL, Eureka, API Gateway, and RabbitMQ
  auth_service:
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_HOST: "postgres"
      SPRING_DATASOURCE_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka:8761/eureka/
      SPRING_APPLICATION_NAME: auth_service
    depends_on:
      maven-build:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka:
        condition: service_healthy
      api_gateway:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: